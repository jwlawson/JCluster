/**
 * Copyright 2014 John Lawson
 * 
 * DynkinDiagram.java is part of JCluster.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.co.jwlawson.jcluster;

import java.util.EnumSet;

/**
 * @author John Lawson
 * 
 */
public enum DynkinDiagram {
	//@formatter:off
	A2(2, 0,1,-1,0),
	A3(3, 	 0, 1, 0,
			-1, 0, 1,
			 0,-1, 0),
	A4(4, 	 0, 1, 0, 0,
			-1, 0, 1, 0,
			 0,-1, 0, 1,
			 0, 0,-1, 0),
	A5(5, 	 0, 1, 0, 0, 0, 
			-1, 0, 1, 0, 0,
			 0,-1, 0, 1, 0,
			 0, 0,-1, 0, 1,
			 0, 0, 0,-1, 0),
	A6(6, 	 0, 1, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0,
			 0,-1, 0, 1, 0, 0,
			 0, 0,-1, 0, 1, 0, 
			 0, 0, 0,-1, 0, 1,
			 0, 0, 0, 0,-1, 0),
	A7(7, 	 0, 1, 0, 0, 0, 0, 0, 
			-1, 0, 1, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0,-1, 0, 1,
			 0, 0, 0, 0, 0,-1, 0),
	A8(8, 	 0, 1, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 
			 0, 0,-1, 0, 1, 0, 0, 0, 
			 0, 0, 0,-1, 0, 1, 0, 0, 
			 0, 0, 0, 0,-1, 0, 1, 0, 
			 0, 0, 0, 0, 0,-1, 0, 1, 
			 0, 0, 0, 0, 0, 0,-1, 0),
	A9(9,  	 0, 1, 0, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0, 0, 0,
			 0, 0, 0,-1, 0, 1, 0, 0, 0,
			 0, 0, 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0, 0, 0,-1, 0, 1,
			 0, 0, 0, 0, 0, 0, 0,-1, 0 ),
	B2(2, 0,1,-2,0),
	B3(3,	 0, 1, 0,
			-1, 0, 2,
			 0,-1, 0),
	B4(4,	 0, 1, 0, 0,
			-1, 0, 1, 0,
			 0,-1, 0, 2,
			 0, 0,-1, 0),
	B5(5, 	 0, 1, 0, 0, 0, 
			-1, 0, 1, 0, 0,
			 0,-1, 0, 1, 0,
			 0, 0,-1, 0, 2,
			 0, 0, 0,-1, 0),
	B6(6, 	 0, 1, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0,
			 0,-1, 0, 1, 0, 0,
			 0, 0,-1, 0, 1, 0, 
			 0, 0, 0,-1, 0, 2,
			 0, 0, 0, 0,-1, 0),
	B7(7, 	 0, 1, 0, 0, 0, 0, 0, 
			-1, 0, 1, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0,-1, 0, 2,
			 0, 0, 0, 0, 0,-1, 0),
	B8(8, 	 0, 1, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 
			 0, 0,-1, 0, 1, 0, 0, 0, 
			 0, 0, 0,-1, 0, 1, 0, 0, 
			 0, 0, 0, 0,-1, 0, 1, 0, 
			 0, 0, 0, 0, 0,-1, 0, 2, 
			 0, 0, 0, 0, 0, 0,-1, 0),
	B9(9,  	 0, 1, 0, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0, 0, 0,
			 0, 0, 0,-1, 0, 1, 0, 0, 0,
			 0, 0, 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0, 0, 0,-1, 0, 2,
			 0, 0, 0, 0, 0, 0, 0,-1, 0 ),
	C3(3,	 0, 1, 0,
			-1, 0,-1,
			 0, 2, 0),
	C4(4,	 0, 1, 0, 0,
			-1, 0, 1, 0,
			 0,-1, 0,-1,
			 0, 0, 2, 0),
	C5(5, 	 0, 1, 0, 0, 0, 
			-1, 0, 1, 0, 0,
			 0,-1, 0, 1, 0,
			 0, 0,-1, 0,-1,
			 0, 0, 0, 2, 0),
	C6(6, 	 0, 1, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0,
			 0,-1, 0, 1, 0, 0,
			 0, 0,-1, 0, 1, 0, 
			 0, 0, 0,-1, 0,-1,
			 0, 0, 0, 0, 2, 0),
	C7(7, 	 0, 1, 0, 0, 0, 0, 0, 
			-1, 0, 1, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0,-1, 0,-1,
			 0, 0, 0, 0, 0, 2, 0),
	C8(8, 	 0, 1, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 
			 0, 0,-1, 0, 1, 0, 0, 0, 
			 0, 0, 0,-1, 0, 1, 0, 0, 
			 0, 0, 0, 0,-1, 0, 1, 0, 
			 0, 0, 0, 0, 0,-1, 0,-1, 
			 0, 0, 0, 0, 0, 0, 2, 0),
	C9(9,  	 0, 1, 0, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0, 0, 0,
			 0, 0, 0,-1, 0, 1, 0, 0, 0,
			 0, 0, 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0, 0, 0,-1, 0, 1, 0,
			 0, 0, 0, 0, 0, 0,-1, 0,-1,
			 0, 0, 0, 0, 0, 0, 0, 2, 0 ),
	D4(4, 	 0, 1, 0, 0,
			-1, 0, 1, 1,
			 0,-1, 0, 0,
			 0,-1, 0, 0),
	D5(5, 	 0, 1, 0, 0, 0,
			-1, 0, 1, 0, 0,
			 0,-1, 0, 1, 1,
			 0, 0,-1, 0, 0,
			 0, 0,-1, 0, 0),
	D6(6, 	 0, 1, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0,
			 0,-1, 0, 1, 0, 0,
			 0, 0,-1, 0, 1, 1,
			 0, 0, 0,-1, 0, 0,
			 0, 0, 0,-1, 0, 0),
	D7(7, 	 0, 1, 0, 0, 0, 0, 0, 
			-1, 0, 1, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0,-1, 0, 1, 1,
			 0, 0, 0, 0,-1, 0, 0,
			 0, 0, 0, 0,-1, 0, 0),
	D8(8, 	 0, 1, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 
			 0, 0,-1, 0, 1, 0, 0, 0, 
			 0, 0, 0,-1, 0, 1, 0, 0, 
			 0, 0, 0, 0,-1, 0, 1, 1, 
			 0, 0, 0, 0, 0,-1, 0, 0, 
			 0, 0, 0, 0, 0,-1, 0, 0),
	D9(9,  	 0, 1, 0, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 0, 0, 0, 0, 0,
			 0, 0,-1, 0, 1, 0, 0, 0, 0,
			 0, 0, 0,-1, 0, 1, 0, 0, 0,
			 0, 0, 0, 0,-1, 0, 1, 0, 0,
			 0, 0, 0, 0, 0,-1, 0, 1, 1,
			 0, 0, 0, 0, 0, 0,-1, 0, 0,
			 0, 0, 0, 0, 0, 0,-1, 0, 0 ),
	E6(6, 	 0, 1, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0,
			 0,-1, 0, 1, 1, 0,
			 0, 0,-1, 0, 0, 0, 
			 0, 0,-1, 0, 0, 1,
			 0, 0, 0, 0,-1, 0),
	E7(7, 	 0, 1, 0, 0, 0, 0, 0, 
			-1, 0, 1, 0, 0, 0, 0, 
			 0,-1, 0, 1, 1, 0, 0,
			 0, 0,-1, 0, 0, 0, 0,
			 0, 0,-1, 0, 0, 1, 0,
			 0, 0, 0, 0,-1, 0, 1,
			 0, 0, 0, 0, 0,-1, 0),
	E8(8, 	 0, 1, 0, 0, 0, 0, 0, 0,
			-1, 0, 1, 0, 0, 0, 0, 0, 
			 0,-1, 0, 1, 1, 0, 0, 0, 
			 0, 0,-1, 0, 0, 0, 0, 0, 
			 0, 0,-1, 0, 0, 1, 0, 0, 
			 0, 0, 0, 0,-1, 0, 1, 0, 
			 0, 0, 0, 0, 0,-1, 0, 1, 
			 0, 0, 0, 0, 0, 0,-1, 0),
	G2(2, 	 0, 3,
			-1, 0);
	
	//@formatter:on
	private final QuiverMatrix matrix;

	private DynkinDiagram(int size, int... data) {
		matrix = new QuiverMatrix(size, size, data);
	}

	public QuiverMatrix getMatrix() {
		return matrix;
	}

	public static EnumSet<DynkinDiagram> A_SET = EnumSet.range(A2, A8);
	public static EnumSet<DynkinDiagram> B_SET = EnumSet.range(B2, B9);
	public static EnumSet<DynkinDiagram> C_SET = EnumSet.range(C3, C9);
	public static EnumSet<DynkinDiagram> D_SET = EnumSet.range(D4, D8);
	public static EnumSet<DynkinDiagram> E_SET = EnumSet.range(E6, E8);

	/** Variety of diagrams to use for testing */
	public static EnumSet<DynkinDiagram> TEST_SET = EnumSet.of(A2, A3, A4, A5,
			A6, A7, A8, D4, D5, D6, D7, D8, E6, E7, E8, G2);
}
